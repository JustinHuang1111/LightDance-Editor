# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddDancerInput {
  name: String!
}

input AddPartForDancer {
  partName: String!
  partType: String!
}

input AddPartInput {
  dancerName: String!
  name: String!
  type: String!
}

input ColorInput {
  color: String!
  colorCode: String!
}

type ColorPayload {
  color: String!
  colorCode: String
  editBy: String!
  mutation: String!
}

type Control {
  frame: ControlFrame!
  status: ControlDevice!
}

union ControlDevice = EL | FIBER | LED

type ControlFrame {
  editing: String
  fade: Boolean!
  id: ID!
  start: Float!
}

type ControlMapPayload {
  mutation: String!
}

type ControlRecordPayload {
  editBy: String!
  frameID: ID!
  index: Int!
  mutation: String!
}

"""The basic control types"""
enum ControlType {
  EL
  FIBER
  LED
}

type Dancer {
  name: String!
  parts: [Part!]!
  positionData: [Position!]!
}

enum dancerMutation {
  CREATED
  DELETED
  UPDATED
}

type DancerPayload {
  dancerData: Dancer
  editBy: String!
  mutation: dancerMutation!
}

type EL {
  value: Int!
}

type FIBER {
  alpha: Float!
  color: String!
}

type LED {
  alpha: Float!
  src: String!
}

type Mutation {
  addDancer(dancer: AddDancerInput!, parts: AddPartForDancer!): Dancer!
  addPart(part: AddPartInput!): Part!
  updateColor(color: ColorInput!): String!
}

type Part {
  controlData: [Control!]!
  name: String!
  type: ControlType!
}

type Position {
  frame: PositionFrame!
  x: Float!
  y: Float!
  z: Float!
}

type PositionFrame {
  editing: String
  id: ID!
  start: Float!
}

type Query {
  color(color: String!): String!
  dancer: [Dancer!]!
}

type Subscription {
  colorSubscription: ColorPayload!
  controlMapSubscription: ControlMapPayload!
  controlRecordSubscription: ControlRecordPayload!
  DancerSubscription: DancerPayload!
}
